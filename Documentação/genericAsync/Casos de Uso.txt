Caso 1: Execução de query não parametrizada com retorno. (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table atleta (id serial primary key, nome varchar(50), modalidade varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Marta', 'Futebol');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Michael Jordan', 'Basquete');
--------------------------------------------------------------------------------------------------------------------
6) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Daniel Negreanu', 'Poker');
--------------------------------------------------------------------------------------------------------------------
7) O usuário deve criar um arquivo lab.js contendo um código que utilize a função genericAsync, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

let query = 'select * from atleta'

orm.genericAsync(query, null).then(resp => console.log(resp))
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um array, contendo 3 objetos, seja impresso no terminal. Cada objeto deverá possuir
os atributos id, nome e modalidade, preenchidos conforme inserções realizadas nos passos 4, 5 e 6.

Caso 2: Execução de query parametrizada com 1 valor e com retorno (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table atleta (id serial primary key, nome varchar(50), modalidade varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Marta', 'Futebol');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Michael Jordan', 'Basquete');
--------------------------------------------------------------------------------------------------------------------
6) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Daniel Negreanu', 'Poker');
--------------------------------------------------------------------------------------------------------------------
7) O usuário deve criar um arquivo lab.js contendo um código que utilize a função genericAsync, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

let query = 'select * from atleta where modalidade = $1'
let values = ['Futebol']

orm.genericAsync(query, values).then(resp => console.log(resp))
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um array, contendo 1 objeto, seja impresso no terminal. O objeto deverá possuir
os atributos id preenchido conforme sequência gerada no banco de dados, nome igual a 'Marta' e modalidade igual a
'Futebol'.

Caso 3: Execução de query parametrizada com 2 valores e com retorno. (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table atleta (id serial primary key, nome varchar(50), modalidade varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Marta', 'Futebol');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Michael Jordan', 'Basquete');
--------------------------------------------------------------------------------------------------------------------
6) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Daniel Negreanu', 'Poker');
--------------------------------------------------------------------------------------------------------------------
7) O usuário deve criar um arquivo lab.js contendo um código que utilize a função genericAsync, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

let query = 'select * from atleta where modalidade in ($1, $2)'
let values = ['Basquete', 'Poker']

orm.genericAsync(query, values).then(resp => console.log(resp))
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um array, contendo 2 objetos, seja impresso no terminal. Cada objeto deverá possuir
os atributos id, nome e modalidade, preenchidos conforme inserções realizadas nos passos 5 e 6.

Caso 4: Execução de query sem retorno. (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table musica (autor varchar(50), nome varchar(50), ano int);
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve criar um arquivo lab.js contendo um código que utilize a função getGeneric, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

let query = "insert into musica(autor, nome, ano) values ('John Lennon', 'Imagine', 1980)"

orm.genericAsync(query, null).then(resp => console.log(resp))
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um array vazio seja impresso no terminal. Além disso, espera-se que um novo registro
tenha sido incluído com sucesso na tabela musica do banco de dados.

Caso 5: Execução de query parametrizada com número de parâmetros diferente dos valores informados. (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table atleta (id serial primary key, nome varchar(50), modalidade varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Marta', 'Futebol');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Michael Jordan', 'Basquete');
--------------------------------------------------------------------------------------------------------------------
6) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into atleta (nome, modalidade) values ('Daniel Negreanu', 'Poker');
--------------------------------------------------------------------------------------------------------------------
7) O usuário deve criar um arquivo lab.js contendo um código que utilize a função genericAsync, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

let query = 'select * from atleta where modalidade = $1'
let values = ['Poker', 'Daniel Negreanu']

orm.genericAsync(query, values).then(resp => console.log(resp)).catch(error => console.log(error))
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que o erro "bind message supplies 2 parameters, but prepared statement "" 
requires 1" seja impresso no terminal.

Caso 6: Tentativa de consulta com parâmetros de conexão inválidos. (Automatizado)

Pré-condições: 
1) O usuário deve criar um arquivo lab.js e utilizar a função genericAsync como no exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

let conn = {
    user: '',
    host: '',
    database: '',
    password: '',
    port: 0
}

orm.genericAsync("", null, conn).then(resp => console.log(resp)).catch(error => console.log(error))
--------------------------------------------------------------------------------------------------------------------

Execuçãoo: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um erro de conexão seja impresso no terminal.
