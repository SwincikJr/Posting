Função: insertObject

Assinatura: insertObject(instance: any, callback: any, onConfig?: any): void

Arquivo fonte: inserObject.js

Descrição: A função insertObject realiza a inserção dos dados de um objeto em uma tabela de um banco de dados Postgres. O parâmetro instance
deve receber um objeto que contenha os dados que se deseja inserir. Caso a operação seja bem sucedida, a callback declarada no segundo parâmetro é
invocada, recebendo o objeto inserido como parâmetro. Em caso de erro, a callback ainda é invocada, recebendo o erro ocorrido como segundo parâmetro.
O parâmetro onConfig é opcional e, caso preenchido, deve conter o objeto com os dados necessários para estabelecimento da conexão. Caso onConfig 
seja omitido, serão utilizadas as informações contidas no arquivo postingConfig.js para estabelecimento da conexão (veja a documentação de getConnection).  

Cuidados para o uso: O objeto passado no parâmetro instance deve ser instância de uma Classe cujo nome seja igual ao nome da tabela do banco de
dados em que se deseje realizar a inserção. Da mesma forma, os atributos dessa Classe devem possuir os mesmos nomes dos campos dessa tabela, com
exceção de '_Auto', que é um atributo reservado da Classe Posting destinado a identificar os atributos cujo preenchimento é realizado de forma
automática pelo banco de dados postgres (como o campo destinado a uma chave primária sequencial, por exemplo). Assim, caso o objeto a ser inserido
possua atributos cujo preenchimento é de responsabilidade do banco de dados, basta que a classe desse objeto herde a classe Posting, e esses 
atributos sejam informados ao método setAuto (veja a documentação de Posting).
 
Exemplos de uso:

1)
---------------------------------------------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Teste
{
    constructor(id = null, seq = null, campo = null)
    {
        this.id = id
        this.seq = seq
        this.campo = campo
    }
}

orm.insertObject(new Teste(1, 2, 'Mauro'), (res, err) => {
    if(!err)
    {
        console.log(res)
    }
}) // Query gerada: insert into teste (id, seq, campo) values (1, 2, 'Mauro')
---------------------------------------------------------------------------------------------------------------------------------------------------------

2)
---------------------------------------------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Teste extends orm.Posting
{
    constructor(id = null, seq = null, campo = null)
    {
        super()
        this.id = id
        this.seq = seq
        this.campo = campo
        this.setAuto('id', 'seq')
    }
}

orm.insertObject(new Teste(null, null, 'Mauro'), (res, err) => {
    if(!err)
    {
        console.log(res)
    }
}) // Query gerada: insert into teste (campo) values ('Mauro') returning id, seq
// Os valores de retorno da query são usados para preencher o objeto antes de devolvê-lo à callback
// Neste caso, mesmo que os valores de id e seq do objeto estivessem previamente preenchidos, seriam desonsiderados e substituídos pelo retorno da query
---------------------------------------------------------------------------------------------------------------------------------------------------------
