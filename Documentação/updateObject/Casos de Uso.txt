Caso 1: Alterar dado de classe sem _Key (Automatizado).

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table carro(id serial primary key, marca varchar(50), linha varchar(50), modelo varchar(50), ano_modelo varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve criar um arquivo lab.js e utilizar a função updateObject como no exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const getObject = require('./getObject')
const insertObject = require('./insertObject')
const updateObject = require('./updateObject')
const Posting = require('./Posting')

class Carro extends Posting
{
    constructor(id = null, marca = null, linha = null, modelo = null, ano_modelo = null)
    {
        super()
        this.id = id
        this.marca = marca
        this.linha = linha
        this.modelo = modelo
        this.ano_modelo = ano_modelo
        this.setAuto('id')
    }
}

let carros = []

const altera = () => {
    carros[0].ano_modelo = '2015'
    updateObject(carros[0], resp => {
        getObject(new Carro(carros[1].id), resp => {
            console.log(resp)
        })
    })
}

insertObject(new Carro(null, 'GM', 'Onix', '1.4 Flex', '2014'), resp => { 
    carros.push(resp) 
    insertObject(new Carro(null, 'GM', 'Celta', '1.0 Flex', '2009'), resp => { 
        carros.push(resp) 
        altera()
    })
})

--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um objeto Carro seja impresso no terminal com o atributo id preenchido, o atributo
marca igual a 'GM', o atributo linha igual a 'ONIX', o atributo modelo igual à '1.4 Flex' e ano_modelo igual à '2015'.
Nesse momento, caso a tabela Carro no banco de dados postgres seja consultada, todos os registros estarão iguais, com
exceção do campo id.

Caso 2: Alterar dado de classe somente _Key (Automatizado).

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table filial(id serial primary key, logradouro varchar(50), endereco varchar(50), numero int, bairro varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve criar um arquivo lab.js e utilizar a função updateObject como no exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const getObject = require('./getObject')
const insertObject = require('./insertObject')
const updateObject = require('./updateObject')
const Posting = require('./Posting')

class Filial extends Posting
{
    constructor(id = null, logradouro = null, endereco = null, numero = null, bairro = null)
    {
        super()
        this.id = id
        this.logradouro = logradouro
        this.endereco = endereco
        this.numero = numero
        this.bairro = bairro
        this.setAuto('id')
        this.setKey('id', 'logradouro', 'endereco', 'numero', 'bairro')
    }
}

insertObject(new Filial(null, 'Rua', 'das Conchas', 10, 'Vila Aurora'), resp => {
    resp.logradouro = 'Avenida'
    resp.endereco = 'da Nação'
    resp.numero = 1012
    resp.bairro = 'Pátria Amada'
    updateObject(resp, resp => {
        getObject(new Filial(resp.id), resp => {
            console.log(resp)
        })
    })
})

--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um objeto Filial seja impresso no terminal com o atributo id preenchido, o atributo
logradouro igual a 'Rua', o atributo endereco igual a 'das Conchas', o atributo numero igual à 10 e bairro igual à 
'Vila Aurora'. Em outras palavras, nenhuma alteração deve ocorrer em relação ao registro original.

Caso 3: Alterar dado de classe com atributos _Key e não _Key (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table conta(id serial primary key, email varchar(50), senha varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve criar um arquivo lab.js e utilizar a função updateObject como no exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const getObject = require('./getObject')
const insertObject = require('./insertObject')
const updateObject = require('./updateObject')
const Posting = require('./Posting')

class Conta extends Posting
{
    constructor(id = null, email = null, senha = null)
    {
        super()
        this.id = id
        this.email = email
        this.senha = senha
        this.setAuto('id')
        this.setKey('id', 'email')
    }
}

insertObject(new Conta(null, 'teste@teste.com', 'password01'), resp => {
    resp.senha = 'password02'
    updateObject(resp, resp => {
        getObject(new Conta(resp.id), resp => {
            console.log(resp)
        })
    })
})

--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um objeto Conta seja impresso no terminal com o atributo id preenchido, o atributo
email igual a 'teste@teste.com' e o atributo senha igual a 'password02'.
