Caso 1: Deleção de objeto sem chave declarada (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table leitor (id serial primary key, nome varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into leitor (nome) values ('Pedro');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into leitor (nome) values ('Hebert');
--------------------------------------------------------------------------------------------------------------------
6) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into leitor (nome) values ('Guilherme');
--------------------------------------------------------------------------------------------------------------------
7) O usuário deve criar um arquivo lab.js contendo um código que utilize a função updateAsync, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Leitor
{
    constructor(id = null, nome = null)
    {
        this.id = id
        this.nome = nome
    }
}

orm.deleteAsync(new Leitor(1, 'Pedro')).then(resp => {
    
    orm.getObject(new Leitor(null, 'Pedro'), resp => {
        console.log(resp)
    })

    orm.getObject(new Leitor(null, 'Hebert'), resp => {
        console.log(resp)
    })

    orm.getObject(new Leitor(null, 'Guilherme'), resp => {
        console.log(resp)
    })
})

--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que 'null' seja impresso no terminal três vezes, significando que nenhum dos registros
foi encontrado.

Caso 2: Deleção de objeto com chave declarada e sem garantia de unicidade (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table livro (id serial primary key, seq varchar(3), titulo varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into livro (seq, titulo) values ('001', 'Título A');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into livro (seq, titulo) values ('001', 'Título B');
--------------------------------------------------------------------------------------------------------------------
6) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into livro (seq, titulo) values ('002' 'Título C');
--------------------------------------------------------------------------------------------------------------------
7) O usuário deve criar um arquivo lab.js contendo um código que utilize a função deleteAsync, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Livro extends orm.Posting
{
    constructor(id = null, seq = null, titulo = null)
    {
        super()
        this.id = id
        this.seq = seq
        this.titulo = titulo
        this.setKey('seq')
    }
}

orm.deleteAsync(new Livro(1, '001', 'Título A')).then(resp => {
    
    orm.getObject(new Livro(1, '001', 'Título A'), resp => {
        console.log(resp)
    })

    orm.getObject(new Livro(2, '001', 'Título B'), resp => {
        console.log(resp)
    })

    orm.getObject(new Livro(3, '002', 'Título C'), resp => {
        console.log(resp)
    })

})
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que 'null' seja impresso no terminal duas vezes e um objeto Livro com os atributos id 3, 
seq '002' e titulo 'Título C', significando que os dois primeiros registros anteriormente inseridos foram deletados.

Caso 3: Deleção de objeto com chave declarada e com garantia de unicidade (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table roteiro (id serial primary key, seq varchar(3), titulo varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into roteiro (seq, titulo) values ('001', 'Título A');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into roteiro (seq, titulo) values ('001', 'Título B');
--------------------------------------------------------------------------------------------------------------------
6) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into roteiro (seq, titulo) values ('002', 'Título C');
--------------------------------------------------------------------------------------------------------------------
7) O usuário deve criar um arquivo lab.js contendo um código que utilize a função deleteAsync, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Roteiro extends orm.Posting
{
    constructor(id = null, seq = null, titulo = null)
    {
        super()
        this.id = id
        this.seq = seq
        this.titulo = titulo
        this.setKey('id')
    }
}

orm.deleteAsync(new Roteiro(1, '001', 'Título A')).then(resp => {
    
    orm.getObject(new Roteiro(1, '001', 'Título A'), resp => {
        console.log(resp)
    })

    orm.getObject(new Roteiro(2, '001', 'Título B'), resp => {
        console.log(resp)
    })

    orm.getObject(new Roteiro(3, '002', 'Título C'), resp => {
        console.log(resp)
    })

})
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que 'null' seja impresso no terminal uma vez e dois objetos Roteiro, um com os atributos id 2, 
seq '001' e titulo 'Título B', e outro com os atributos id 3, seq '002' e titulo 'Titulo C', significando que somente o 
primeiro registro anteriormente inserido foi deletado.

Caso 4: Deleção de objeto inexistente (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar um arquivo lab.js contendo um código que utilize a função deleteAsync, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Inexistente
{
    constructor()
    {
        this.inexistente = 'inexistente'
    }
}

orm.deleteAsync(new Inexistente()).then(resp => console.log(resp)).catch(error => console.log(error))
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um erro de relação inexistente seja impresso no terminal.

Caso 5: Tentativa de deleção com dados de conexão incorretos (Automatizado)

Pré-condições: 
1) O usuário deve criar um arquivo lab.js contendo um código que utilize a função deleteAsync, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Inexistente
{
    constructor()
    {
        this.inexistente = 'inexistente'
    }
}

let conn = {
    user: '',
    host: '',
    database: '',
    password: '',
    port: 0
}

orm.deleteAsync(new Inexistente(), conn).then(resp => console.log(resp)).catch(error => console.log(error))
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um erro de conexão seja impresso no terminal. 
