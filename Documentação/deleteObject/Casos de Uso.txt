Caso 1: Deleção de objeto sem chave declarada (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table cliente (id serial primary key, nome varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into cliente (nome) values ('Pedro');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into cliente (nome) values ('Hebert');
--------------------------------------------------------------------------------------------------------------------
6) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into cliente (nome) values ('Guilherme');
--------------------------------------------------------------------------------------------------------------------
7) O usuário deve criar um arquivo lab.js contendo um código que utilize a função deleteObject, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const deleteObject = require('./deleteObject') //Modificar conforme necessidade
const getObject = require('./getObject') //Modificar conforme necessidade

class Cliente
{
    constructor(id = null, nome = null)
    {
        this.id = id
        this.nome = nome
    }
}

deleteObject(new Cliente(1, 'Pedro'), resp => {
    
    getObject(new Cliente(null, 'Pedro'), resp => {
        console.log(resp)
    })

    getObject(new Cliente(null, 'Hebert'), resp => {
        console.log(resp)
    })

    getObject(new Cliente(null, 'Guilherme'), resp => {
        console.log(resp)
    })

})
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que 'null' seja impresso no terminal três vezes, significando que nenhum dos registros
foi encontrado.

Caso 2: Deleção de objeto com chave declarada e sem garantia de unicidade (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table documento (id serial primary key, seq varchar(3), titulo varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into documento (seq, titulo) values ('001', 'Título A');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into documento (seq, titulo) values ('001', 'Título B');
--------------------------------------------------------------------------------------------------------------------
6) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into documento (seq, titulo) values ('002' 'Título C');
--------------------------------------------------------------------------------------------------------------------
7) O usuário deve criar um arquivo lab.js contendo um código que utilize a função deleteObject, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const deleteObject = require('./deleteObject') //Modificar conforme necessidade
const Posting = require('./Posting') //Modificar conforme necessidade
const getObject = require('./getObject') //Modificar conforme necessidade

class Documento extends Posting
{
    constructor(id = null, seq = null, titulo = null)
    {
        super()
        this.id = id
        this.seq = seq
        this.titulo = titulo
        this.setKey('seq')
    }
}

deleteObject(new Documento(1, '001', 'Título A'), resp => {
    
    getObject(new Documento(1, '001', 'Título A'), resp => {
        console.log(resp)
    })

    getObject(new Documento(2, '001', 'Título B'), resp => {
        console.log(resp)
    })

    getObject(new Documento(3, '002', 'Título C'), resp => {
        console.log(resp)
    })

})
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que 'null' seja impresso no terminal duas vezes e um objeto Documento com os atributos id 3, 
seq '002' e titulo 'Título C', significando que os dois primeiros registros anteriormente inseridos foram deletados.

Caso 3: Deleção de objeto com chave declarada e com garantia de unicidade (Automatizado)

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table cena (id serial primary key, seq varchar(3), titulo varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into cena (seq, titulo) values ('001', 'Título A');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into cena (seq, titulo) values ('001', 'Título B');
--------------------------------------------------------------------------------------------------------------------
6) O usuário deve inserir nessa tabela um registro conforme segue:
--------------------------------------------------------------------------------------------------------------------
insert into cena (seq, titulo) values ('002' 'Título C');
--------------------------------------------------------------------------------------------------------------------
7) O usuário deve criar um arquivo lab.js contendo um código que utilize a função deleteObject, como no 
exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const deleteObject = require('./deleteObject') //Modificar conforme necessidade
const Posting = require('./Posting') //Modificar conforme necessidade
const getObject = require('./getObject') //Modificar conforme necessidade

class Cena extends Posting
{
    constructor(id = null, seq = null, titulo = null)
    {
        super()
        this.id = id
        this.seq = seq
        this.titulo = titulo
        this.setKey('id')
    }
}

deleteObject(new Cena(1, '001', 'Título A'), resp => {
    
    getObject(new Cena(1, '001', 'Título A'), resp => {
        console.log(resp)
    })

    getObject(new Cena(2, '001', 'Título B'), resp => {
        console.log(resp)
    })

    getObject(new Cena(3, '002', 'Título C'), resp => {
        console.log(resp)
    })

})
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que 'null' seja impresso no terminal uma vez e dois objetos Cena, um com os atributos id 2, 
seq '001' e titulo 'Título B', e outro com os atributos id 3, seq '002' e titulo 'Titulo C', significando que somente o 
primeiro registro anteriormente inserido foi deletado.
