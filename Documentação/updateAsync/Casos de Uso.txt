Caso 1: Alterar dado de classe sem _Key.

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table tarefa(id serial primary key, descricao varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve criar um arquivo lab.js e utilizar a função updateAsync como no exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Tarefa extends orm.Posting
{
    constructor(id = null, descricao = null)
    {
        super()
        this.id = id
        this.descricao = descricao
        this.setAuto('id')
    }
}

let tarefaParaAlterar = {}
let idTarefaAfetada = 0

const insertOne = () => {
	orm.insertAsync(new Tarefa(null, 'Tarefa 1')).then(resp => {
		tarefaParaAlterar = resp
		insertTwo()	
	})
}

const insertTwo = () => {
	orm.insertAsync(new Tarefa(null, 'Tarefa 2')).then(resp => {
		idTarefaAfetada = resp.id
		atualizaTarefa()
	})
}

const atualizaTarefa = () => {
	tarefaParaAlterar.descricao = 'Tarefa 3'
	orm.updateAsync(tarefaParaAlterar).then(resp => {
		tarefaParaAlterar = resp
		verificaAfetada()
	})
}

const verificaAfetada = () => {
	orm.getAsync(new Tarefa(idTarefaAfetada)).then(resp => {
		console.log(resp.descricao == tarefaParaAlterar.descricao)
	})
}

insertOne()

--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que 'True' seja impresso no terminal. Isso significa que, como não foi declarado chave
na classe Tarefa, o updateAsync executou a query sem cláusula where, alterando todo o banco de dados. 

Caso 2: Alterar dado de classe somente _Key.

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table etapa(id serial primary key, descricao varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve inserir um novo registro nessa tabela como se segue:
--------------------------------------------------------------------------------------------------------------------
insert into etapa (descricao) values ('Etapa 1');
--------------------------------------------------------------------------------------------------------------------
5) O usuário deve criar um arquivo lab.js e utilizar a função updateAsync como no exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Etapa extends orm.Posting
{
    constructor(id = null, descricao = null)
    {
        super()
        this.id = id
        this.descricao = descricao
        this.setAuto('id')
	this.setKey('id', 'descricao')
    }
}

let etapa = new Etapa(null, 'Etapa 1')

updateRecord = () => {
	orm.updateAsync(etapa).then(resp => {
		checkRecord()
	})
}

checkRecord = () => {
	orm.getAsync(etapa).then(resp => console.log(resp))
}

orm.getAsync(etapa).then(resp => {
	etapa = resp
	etapa.descricao = 'Etapa 2'
	updateRecord()
})



--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que 'null' seja impresso no terminal. Em outras palavras, nenhuma alteração deve 
ocorrer em relação ao registro original.

Caso 3: Alterar dado de classe com atributos _Key e não _Key.

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table item(id serial primary key, descricao varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve criar um arquivo lab.js e utilizar a função updateAsync como no exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Item extends orm.Posting
{
    constructor(id = null, descricao = null)
    {
        super()
        this.id = id
        this.descricao = descricao
        this.setAuto('id')
	this.setKey('id')
    }
}

orm.insertAsync(new Item(null, 'Item 1')).then(resp => {
	resp.descricao = 'Item 2'
	orm.updateAsync(resp).then(resp => {
		orm.getAsync(new Item(resp.id)).then(resp => console.log(resp.descricao))
	})
})

--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que o texto 'Item 2' seja impresso no terminal, indicando sucesso na alteração do registro.

Caso 4: Tentativa de alteração em tabela não existente

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar um arquivo lab.js e utilizar a função updateAsync como no exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Inexistente
{
    constructor()
    {
	this.atr = ''
    }

}

orm.updateAsync(new Inexistente()).then(resp => console.log(resp)).catch(error => console.log(error))

--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um erro de tabela inexistente seja impresso no terminal. 

Caso 5: Tentativa de alteração em coluna não existente

Pré-condições: 
1) O usuário deve possuir acesso a um banco de dados Postgres.
2) O usuário deve configurar o arquivo postingConfig.js com as informações corretas acerca do banco de dados 
Postgres que possui acesso, como no exemplo abaixo, e salva-lo no mesmo diretório do arquivo fonte getConnection.js:
--------------------------------------------------------------------------------------------------------------------
module.exports = {
    user: 'postgres',
    host: 'localhost',
    database: 'database',
    password: 'password',
    port: 5432 //your port
}
--------------------------------------------------------------------------------------------------------------------
3) O usuário deve criar uma tabela em seu banco de dados conforme a seguinte estrutura:
--------------------------------------------------------------------------------------------------------------------
create table tarefa(id serial primary key, descricao varchar(50));
--------------------------------------------------------------------------------------------------------------------
4) O usuário deve criar um arquivo lab.js e utilizar a função updateAsync como no exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Tarefa extends orm.Posting
{
    constructor(id = null, descricao = null)
    {
        super()
        this.id = id
        this.descricao = descricao
        this.setAuto('id')
    }
}

let tarefa = new Tarefa()
tarefa.inexistente = 'inexistente'

orm.updateAsync(tarefa).then(resp => console.log(resp)).catch(error => console.log(error))

--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um erro de coluna inexistente seja impresso no terminal. 

Caso 6: Tentativa de alteração com dados de conexão incorretos

Pré-condições: 
1) O usuário deve criar um arquivo lab.js e utilizar a função updateAsync como no exemplo abaixo:
--------------------------------------------------------------------------------------------------------------------
const orm = require('./index')

class Teste
{
	constructor(atr = null)
	{
		this.atr = atr
	}
}

let conn = {
    user: '',
    host: '',
    database: '',
    password: '',
    port: 0
}

orm.updateAsync(new Teste(), conn).then(resp => console.log(resp)).catch(error => console.log(error))
--------------------------------------------------------------------------------------------------------------------

Execução: em um terminal, estando no mesmo diretório do arquivo lab.js, execute o comando "node lab.js".

Resultado Esperado: espera-se que um erro de conexão seja impresso no terminal. 
